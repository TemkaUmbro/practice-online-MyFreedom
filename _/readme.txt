●●● HW-9 ●●●

9.1 — Выполнено и закоммничено в ветке HW-8 под названием 8.6
9.2 — Установил CodeStream.
9.3 — Установил eslint в HW-8.
9.4 — Изучил введения в браузерные события.

●●● HW-10 ●●●

10.3 — Eslint установлен в 8 заднии.
10.4 — Вопросов на данный момент нет.
10.6 — изучил.

●●● HW-11 ●●●

11.2 — создал приватный репозиторий на гитхабе final-project-ArtsiomUmbryian, добавил вас как коллаборатора yury.myfreedom@gmail.com
11.3 — поднял первый пиар с eslint
11.4 — перешёл в консоль фаербэйза https://console.firebase.google.com/, в разделе hosting создал проект, назвал так же, как и репозиторий на гитхабе, инициализировал проект в firebase

● npm install -g firebase-tools
● firebase login
● firebase init
● firebase deploy

и поднял второй пиар в рамках той же задачи, в пиаре отметил ссылку на проект в интернете

11.6* — реализовал клонирование из задания 2 через метод cloneDeep библиотеки LoDash

●●● HW-12 ●●●

12.1 — выполнил в HW-11.1
12.2 — выполнил в HW-11.2 
12.3 — выполнил в HW-11.3
12.4 — выполнил в HW-11.4
12.5 — взял за идею итогового проекта, макет из уроков по вёрстке(html & css)

●●● HW-13 ●●●

13.1 — в HW-12
13.2 — Название приюта - Cozy House
- Решает проблему бездомных животных
- С помощью сервисаможно выбрать себе питомца
- Сервис является бесплатным, но можно вносить пожертвования
- About the shelter, Our pets, Contacts
13.3 — done
13.4 — https://final-project-artsiomumbryian.web.app
13.5 — done
13.6* — done
13.7* — (48-59) в функции removeColorClicked() заменил reset() на htmlElements.input.value = ''; для того, чтобы при неправильно вводе цвета, цвет фона оставался.
       (61-72) в функции removeSelectedColorClicked() добавил reset(); для изменения цвета фона.

●●● HW-14 ●●●

14.1 — Добавил верстку второй страницы в проект
14.2 — Добавил меню в первую страницу проекта
14.3 — Реализовал переключение меню через JS (с перезагрузкой страницы) используя location.href
14.4 — Реализовал переключение меню через JS (без перезагрузки страницы) (https://github.com/js-myfreedom/final-project-ArtsiomUmbryian/tree/HW-14)

●●● HW-15 ●●●

15.1 — Добавил верстку второй страницы в проект
15.2 — Добавил меню в первую страницу проекта
15.3 — Реализовал переключение меню через JS (с перезагрузкой страницы) используя location.href
15.4 — Реализовал переключение меню через JS (без перезагрузки страницы) (https://github.com/js-myfreedom/final-project-ArtsiomUmbryian/tree/HW-14)

●●● HW-16 ●●●

16.1 — Изучил умные параметры функций и деструктурирование объектов.
16.2 — Изучил XMLHttpRequest и Fetch
16.3 — Создал модуль Service, который при помощи XMLHttpRequest (Service.prototype.getDataViaXMLHttpRequest, запрос отправляем синхронно, используем request method GET) и Fetch (Service.prototype.getDataViaFetch, примеры по работе с fetch и typicode можно посмотреть здесь) получит todo элементы из https://jsonplaceholder.typicode.com/todos и при помощи колбэка передаст их в модуль Main, где произойдет вывод этих элементов в консоль при помощи цикла forEach. Для реализации передачи параметров используем умные параметры функций

●●● HW-17 ●●●

17.1 — done (folder 17.1)
17.2 — done (folder 17.2)
17.3* — Подготовиться к проверочной работе (пробежаться по всему материалу, теории и практике, которую уже прошли до 16 занятия включительно)
17.4* — not done
17.5* — not done
17.6* — not done
17.7* — done (folder 17.7)

●●● HW-18 ●●●

18.1 — done
18.2 — done
18.3 — done
18.4 — done
18.5 — done

●●● HW-19 ●●●

19.0 — done — обновить свои карточки в Jira
19.1 — done — страница Feedbacks - под формой обратной связи отобразить в табличном виде список фидбеков, сохраненных ранее в localStorage (используем JSON.stringify)
19.2 — done — сделать так, чтобы по ссылке в формате http://example.com#page=page1 отобразилась страница page1, параметры парсим при помощи split
19.3 — done — в п. 2, страницу Feedbacks отображаем только если у текущего пользователя role имеет значение admin
19.4 — done — при клике на элемент в меню у нас не только без перезагрузки открывается нужная страница, но и url отображается в формате http://example.com#page=page1, где page1 - страница, которую выбрал пользователь

●●● HW-20 ●●●

20.1 — done in HW-22.1
20.2 — done in HW-22.2
20.3 — done in HW-22.3
20.3 — done in HW-22.3
20.4 — done in HW-22.4
20.5 — done in HW-22.5

●●● HW-21 ●●●

21.1 — done in HW-22.1
21.2 — done in HW-22.2
21.3 — done in HW-22.3
21.3 — done in HW-22.3
21.4 — done in HW-22.4
21.5 — done in HW-22.5

●●● HW-22 ●●●

22.1 — done — В финальный проект добавить модуль clock, разобрать пример с реализацией часов, используя setInterval добавить часы (стилизация на свое усмотрение) в шапку основной страницы
22.2 — done — в 16.3 реализовать получение данных через async/ await и fetch
22.3 — done — в п. 2 перед выводом данных в консоль используя map и toUpperCase преобразовать данные, таким образом, чтобы в каждом объекте, который выведется в консоль значение поля title отобразилось в верхнем регистре (состояло только из заглавных букв), данные были отсортированы при помощи sort по убыванию значения поля id и отфильтрованы при помощи filter по критерию 5 < userId < 10 (userId больше 5 и меньше 10)
22.3 — done — в п. 3 используя map преобразовать результирующий массив таким образом, что поле title теперь будет содержать содержит не строку, а массив из всех слов этой строки (для преобразования строки в массив используем split
22.4 — done — в п. 3 используя reduce в результирующем массиве объектов (полученный после map, sort и filter) посчитать сумму всех значений id
22.5 — done — изучить - делегирование событий, разница между evt.currentTarget (он же this) и evt.target, в 18.2 нажатие на кнопку OK реализовать через делегирование событий
22.6 — Подготовиться к проверочной работе (пробежаться по всему материалу, теории и практике, которую уже прошли до 19 занятия включительно)
22.7* — done — 2 дива, один внешний, один внутренний, оба подписаны на события клика, при нажатии на внутренний при помощи stopPropagation прекращаем всплытие, в результате чего обработчик, повешенный на внешний див, не будет вызван
22.8* — done — Реализовать п.1 через setTimeout
22.9* — done — Изучить теорию про цикл событий, включая макротаски и микротаски

●●● HW-23 ●●●

23.1 — done (in final-project) — Реализовать проверку на корректность логина/пароля, если такого пользователя нет - показать валидационное сообщение (кто еще не сделал)
23.2 — done (in final-project) — Реализовать модуль clock через функцию-конструктор Clock и export
23.3 — done — Реализовать модуль coloredClock, в котором импортируем модуль clock, создаем класс ColoredClock наследуемся от него через extend и при помощи JS раскрашивает часики в цвет, который передаем в constructor класса из модуля main
23.4 — done — Разобраться с find (https://learn.javascript.ru/array-methods#find-i-findindex)

●●● HW-24 ●●●

24.1 — done (in final-project) — Добавить на форму логина проверку почты через регулярные выражения
24.2 — done (in final-project) — Внедрить языковую версию в проект на основе примера 1 либо примера 2 (более продвинутый вариант)
24.3 — done — Изучить каррирование
24.4 — done — Подготовиться к итоговой проверочной
24.5* — done — Разобрать пример с цветными часами coloredClock
6* — done — Разобрать то, как работает слайдер и генерация контента в jedi-markup

●●● HW-25 ●●●

Ответы на вопросы — https://docs.google.com/spreadsheets/d/1aMjcRPEbuDzcR1841pV-SKlGVNeWilKQEUeasLu7DSM/edit?usp=sharing
